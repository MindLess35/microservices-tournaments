name: microservices

services:

  config-server:
    image: mindless35/tournaments:config-server-1.0
    build:
      context: ./config-server
    container_name: config-server
    networks:
      - microservices-network
    environment:
      - SERVER_PORT=8000
    ports:
      - "8000:8000"

  discovery-server:
    image: mindless35/tournaments:discovery-server-1.0
    build:
      context: ./discovery-server
    container_name: discovery-server
    networks:
      - microservices-network
    depends_on:
      - config-server
    environment:
      - SERVER_PORT=8761
    ports:
      - "8761:8761"

  gateway:
    image: mindless35/tournaments:gateway-1.0
    build:
      context: ./gateway
    container_name: gateway
    networks:
      - microservices-network
    depends_on:
      - config-server
      - discovery-server
    environment:
      - SERVER_PORT=8010
    ports:
      - "8010:8010"


  zookeeper:
    image: bitnami/zookeeper:3.8.4
    container_name: zookeeper
    networks:
      - kafka-network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ALLOW_ANONYMOUS_LOGIN: yes
    volumes:
      - zookeeper-data:/bitnami/zookeeper
    ports:
      - "2181:2181"


  kafka:
    image: bitnami/kafka:3.9.0
    container_name: kafka
    restart: on-failure:5
    networks:
      - microservices-network
      - kafka-network
    depends_on:
      - zookeeper
    environment:
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER:PLAINTEXT,LOCAL:PLAINTEXT
      KAFKA_LISTENERS: DOCKER://:9093,LOCAL://:9092
      KAFKA_ADVERTISED_LISTENERS: DOCKER://kafka:9093,LOCAL://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER
    volumes:
      - kafka-data:/bitnami/kafka
    ports:
      - "9092:9092"
      - "9093:9093"


  user-service:
    image: mindless35/tournaments:user-service-1.0
    build:
      context: .
      dockerfile: user/Dockerfile
    container_name: user-service
    restart: on-failure:5
    networks:
      - microservices-network
      - user-service-network
    depends_on:
      - config-server
#      - discovery-server
      - postgres-for-user-service
    environment:
      - SERVER_PORT=8020
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-for-user-service:5432/user
      - SPRING_DATASOURCE_USERNAME=nikita
      - SPRING_DATASOURCE_PASSWORD=1234
      - SPRING_JPA_PROPERTIES_HIBERNATE_DEFAULT_SCHEMA=users
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8000
      - KEYCLOAK_AUTH_SERVER_URL=http://keycloak:8080
      - SPRING_SECURITY_OAUTH2_RESOURCE_SERVER_JWT_ISSUER_URI=http://keycloak:8080/realms/tournaments
      - EUREKA_INSTANCE_HOSTNAME=user
      - EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE=http://discovery-server:8761/eureka
      - SPRING_KAFKA_PRODUCER_BOOTSTRAP_SERVERS=kafka:9093
    ports:
      - "8020:8020"


  postgres-for-user-service:
    image: postgres:15.6
    container_name: postgres-for-user-service
    networks:
      - user-service-network
    environment:
      - POSTGRES_USER=nikita
      - POSTGRES_PASSWORD=1234
      - POSTGRES_DB=user
    volumes:
      - ./user/src/main/resources/postgres/init-postgres.sql:/docker-entrypoint-initdb.d/init-postgres.sql
      - postgres-for-user-service:/var/lib/postgresql/data
    ports:
      - "5432:5432"


  team-service:
    image: mindless35/tournaments:team-service-1.0
    build:
      context: .
      dockerfile: team/Dockerfile
    container_name: team-service
    restart: on-failure:5
    networks:
      - microservices-network
      - team-service-network
    depends_on:
#      - config-server
#      - discovery-server
      - postgres-for-team-service
    environment:
      - SERVER_PORT=8030
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-for-team-service:5432/team
      - SPRING_DATASOURCE_USERNAME=nikita
      - SPRING_DATASOURCE_PASSWORD=1234
      - SPRING_JPA_PROPERTIES_HIBERNATE_DEFAULT_SCHEMA=teams
    ports:
      - "8030:8030"


  postgres-for-team-service:
    image: postgres:15.6
    container_name: postgres-for-team-service
    networks:
      - team-service-network
    environment:
      - POSTGRES_USER=nikita
      - POSTGRES_PASSWORD=1234
      - POSTGRES_DB=team
    volumes:
      - ./team/src/main/resources/postgres/init-postgres.sql:/docker-entrypoint-initdb.d/init-postgres.sql
      - postgres-for-team-service:/var/lib/postgresql/data
    ports:
      - "5433:5432"


  tournament-service:
    image: mindless35/tournaments:tournament-service-1.0
    build:
      context: .
      dockerfile: tournament/Dockerfile
    container_name: tournament-service
    restart: on-failure:5
    networks:
      - microservices-network
      - tournament-service-network
    depends_on:
#      - config-server
#      - discovery-server
      - postgres-for-tournament-service
    environment:
      - SERVER_PORT=8040
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-for-tournament-service:5432/tournament
      - SPRING_DATASOURCE_USERNAME=nikita
      - SPRING_DATASOURCE_PASSWORD=1234
      - SPRING_JPA_PROPERTIES_HIBERNATE_DEFAULT_SCHEMA=tournaments
    ports:
      - "8040:8040"


  postgres-for-tournament-service:
    image: postgres:15.6
    container_name: postgres-for-tournament-service
    networks:
      - tournament-service-network
    environment:
      - POSTGRES_USER=nikita
      - POSTGRES_PASSWORD=1234
      - POSTGRES_DB=tournament
    volumes:
      - ./tournament/src/main/resources/postgres/init-postgres.sql:/docker-entrypoint-initdb.d/init-postgres.sql
      - postgres-for-tournament-service:/var/lib/postgresql/data
    ports:
      - "5434:5432"


  match-service:
    image: mindless35/tournaments:match-service-1.0
    build:
      context: .
      dockerfile: match/Dockerfile
    container_name: match-service
    restart: on-failure:5
    networks:
      - microservices-network
      - match-service-network
    depends_on:
#      - config-server
#      - discovery-server
      - postgres-for-match-service
    environment:
      - SERVER_PORT=8050
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-for-match-service:5432/match
      - SPRING_DATASOURCE_USERNAME=nikita
      - SPRING_DATASOURCE_PASSWORD=1234
      - SPRING_JPA_PROPERTIES_HIBERNATE_DEFAULT_SCHEMA=matches
    ports:
      - "8050:8050"


  postgres-for-match-service:
    image: postgres:15.6
    container_name: postgres-for-match-service
    restart: on-failure:5
    networks:
      - match-service-network
    environment:
      - POSTGRES_USER=nikita
      - POSTGRES_PASSWORD=1234
      - POSTGRES_DB=match
    volumes:
      - ./match/src/main/resources/postgres/init-postgres.sql:/docker-entrypoint-initdb.d/init-postgres.sql
      - postgres-for-match-service:/var/lib/postgresql/data
    ports:
      - "5435:5432"


  notification-service:
    image: mindless35/tournaments:notification-service-1.0
    build:
      context: .
      dockerfile: notification/Dockerfile
    container_name: notification-service
    restart: on-failure:5
    networks:
      - microservices-network
      - notification-service-network
    depends_on:
#      - config-server
#      - discovery-server
      - postgres-for-notification-service
    environment:
      - SERVER_PORT=8060
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-for-notification-service:5432/notification
      - SPRING_DATASOURCE_USERNAME=nikita
      - SPRING_DATASOURCE_PASSWORD=1234
      - SPRING_JPA_PROPERTIES_HIBERNATE_DEFAULT_SCHEMA=notifications
    ports:
      - "8060:8060"


  postgres-for-notification-service:
    image: postgres:15.6
    container_name: postgres-for-notification-service
    networks:
      - notification-service-network
    environment:
      - POSTGRES_USER=nikita
      - POSTGRES_PASSWORD=1234
      - POSTGRES_DB=notification
    volumes:
      - ./notification/src/main/resources/postgres/init-postgres.sql:/docker-entrypoint-initdb.d/init-postgres.sql
      - postgres-for-notification-service:/var/lib/postgresql/data
    ports:
      - "5436:5432"


  keycloak:
    image: bitnami/keycloak:26.0.5-debian-12-r1
    container_name: keycloak
    restart: on-failure:5
    depends_on:
      - postgres-for-keycloak
    networks:
      - microservices-network
      - keycloak-network
    environment:
      - KEYCLOAK_ADMIN=nikita
      - KEYCLOAK_ADMIN_PASSWORD=1234
      - KEYCLOAK_DATABASE_USER=nikita
      - KEYCLOAK_DATABASE_PASSWORD=1234
      - KEYCLOAK_DATABASE_NAME=keycloak_tournaments
      - KEYCLOAK_DATABASE_HOST=postgres-for-keycloak
      - KEYCLOAK_DATABASE_PORT=5432
    ports:
      - "8888:8080"


  postgres-for-keycloak:
    image: postgres:15.6
    container_name: postgres-for-keycloak
    networks:
      - keycloak-network
    environment:
      - POSTGRES_USER=nikita
      - POSTGRES_PASSWORD=1234
      - POSTGRES_DB=keycloak_tournaments
    volumes:
      - postgres-for-keycloak:/var/lib/postgresql/data


  zipkin:
    image: bitnami/zipkin:3.4.2
    container_name: zipkin
    networks:
      - microservices-network
    ports:
      - "9411:9411"

  prometheus:
    image: bitnami/prometheus:2.55.1
    container_name: prometheus
    networks:
      - monitoring
      - microservices-network
    ports:
      - "9090:9090"
    volumes:
      - ./user/src/main/resources/prometheus/prometheus.yml:/opt/bitnami/prometheus/conf/prometheus.yml

  grafana:
    image: grafana/grafana:11.6.0
    container_name: grafana
    depends_on:
      - prometheus
    networks:
      - monitoring
    environment:
      - GF_SECURITY_ADMIN_USER=nikita
      - GF_SECURITY_ADMIN_PASSWORD=1234
    ports:
      - "3000:3000"



networks:
  microservices-network:
    driver: bridge

  kafka-network:
    driver: bridge

  user-service-network:
    driver: bridge

  team-service-network:
    driver: bridge

  tournament-service-network:
    driver: bridge

  match-service-network:
    driver: bridge

  notification-service-network:
    driver: bridge

  keycloak-network:
    driver: bridge

  monitoring:
    driver: bridge


volumes:
  postgres-for-user-service:
    driver: local

  postgres-for-team-service:
    driver: local

  postgres-for-tournament-service:
    driver: local

  postgres-for-match-service:
    driver: local

  postgres-for-notification-service:
    driver: local

  postgres-for-keycloak:
    driver: local

  kafka-data:
    driver: local

  zookeeper-data:
    driver: local

